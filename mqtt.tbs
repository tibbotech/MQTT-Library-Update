include "global.tbh"

'http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
'https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/

const MQTT_INIT_SIGNATURE=&h1688
const MQTT_STAMP="MQTT> "
const MQTT_CR_LF=chr(13)+chr(10)
const MQTT_TIMEOUT=2000

'Message Types
const CONNECT		=&h10
const CONNACK		=&h20
const PUBLISH		=&h30
const PUBACK		=&h40
const PUBREC 		=&h50
const PUBREL		=&h60
const PUBCOMP 		=&h70
const SUBSCRIBE		=&h80
const SUBACK		=&h90
const UNSUBSCRIBE 	=&hA0
const UNSUBACK 		=&hB0
const PINGREQ 		=&hC0
const PINGRESP 		=&hD0
const DISCONNECT 	=&hE0

'mqtt protocol string
const MQTT_LEVEL	=&h04
'const MQTT_PROTOCOL	="MQTT"
const MQTT_PROTOCOL="MQIsdp"
const MQTT_CLIENT_ID= MQTT_APP_CLIENT_ID

enum mqtt_state
	ms_idle				=0,
	ms_connected		=1
end enum

dim mqtt_init_flag as word
dim mqtt_packet_identifier as word
dim mqtt_sock_num as byte
dim mqtt_cur_state as mqtt_state
dim mqtt_keep_alive_timer as word
dim mqtt_timer_record as word
dim mqtt_server_port as word
dim mqtt_server_ip as string(15)
dim mqtt_user as string(30)
dim mqtt_pw	as string(23)
dim mqtt_packet_length as long

#if MQTT_DEBUG_PRINT=1
	declare sub mqtt_debug_print(data as string)
#endif

'-------------------------------------------------------------
sub mqtt_start()
'API procedure, starts the MQTT library.
'MUST be called first, before any other procedure in this library is used.
	
	if mqtt_init_flag=MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("MQTT library already initialized.")
		#endif
		exit sub
	end if

	#if MQTT_DEBUG_PRINT=1
		mqtt_debug_print("---START---")
	#endif

	mqtt_init_flag=MQTT_INIT_SIGNATURE
	mqtt_cur_state=ms_idle
	mqtt_keep_alive_timer=0
	mqtt_packet_identifier=0
	mqtt_sock_num=sock_get("MQTT")
	sock.num=mqtt_sock_num
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.inconmode = PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	'sock.splittcppackets=YES
	sock.gendataarrivalevent=YES
	sock.reconmode=PL_SOCK_RECONMODE_3
	sock.connectiontout=0
	if sys.freebuffpages<MQTT_RX_BUFF+MQTT_TX_BUFF then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("Insufficient buffer memory.")
		#endif
		exit sub
	end if
	sock.rxbuffrq(MQTT_RX_BUFF)
	sock.txbuffrq(MQTT_TX_BUFF)
	sys.buffalloc
end sub

function mqtt_build_remaining_length(size as dword) as string(2)
	mqtt_build_remaining_length = ""
	do
		dim encodedByte as byte = size mod 128
		size = size / 128
		if (size > 0) then encodedByte = encodedByte or 128
		mqtt_build_remaining_length = mqtt_build_remaining_length + chr(encodedByte)
	loop while (size > 0)
end function

function mqtt_get_packet_identifier() as string(2)
	mqtt_packet_identifier = (mqtt_packet_identifier mod 65535) + 1
	mqtt_get_packet_identifier = chr(mqtt_packet_identifier/256)+chr(mqtt_packet_identifier mod 256)
end function

function mqtt_call_connect() as pl_sock_state
	
	const WAIT_CONNECT_TIMEOUT=2000
	dim tmr as dword		
	#if PLATFORM_TYPE_32
		dim t_counter as word = 18000	'about 100ms
	#else
		dim t_counter as word = 500		'about 100ms
	#endif

	sock.num=mqtt_sock_num
	sock.targetip=mqtt_server_ip
	sock.targetport=mqtt_server_port
	
	#if MQTT_SSL
		sock.tlsdeinit()
		sock.tlsbuffrq(38)
		sys.buffalloc
		sock.tlsinit()  'check return state
		sock.rxclear()
		sock.txclear()		
	#endif
	
	sock.connect
	tmr=sys.timercountms
	while sys.timercountms-tmr<18000 and sock.statesimple<>PL_SSTS_EST
	wend
		
#if MQTT_SSL
		sock.tlshandshake()
		tmr=sys.timercountms
		while sys.timercountms-tmr<18000 and sock.state<>PL_TLS_EST		
		wend
		mqtt_call_connect = sock.state
#else
do
		mqtt_call_connect = sock.statesimple
		t_counter = t_counter - 1
	loop while (mqtt_call_connect <> sock.statesimple) and (t_counter > 0)
#endif
end function

sub mqtt_send_login()
	dim buf as string	
	
	if ((mqtt_user = "") or (mqtt_pw = "")) then
		buf=chr(&h0)+chr(len(MQTT_PROTOCOL))+MQTT_PROTOCOL+chr(MQTT_LEVEL)+chr(&h02)+chr(0)+chr(&h3c)+chr(0)+chr(len(MQTT_CLIENT_ID))+MQTT_CLIENT_ID
	else
		buf=chr(&h0)+chr(len(MQTT_PROTOCOL))+MQTT_PROTOCOL+chr(MQTT_LEVEL)+chr(&hc2)+chr(0)+chr(&h3c)+chr(0)+chr(len(MQTT_CLIENT_ID))+MQTT_CLIENT_ID + chr(0)+chr(len(mqtt_user)) + mqtt_user + chr(0)+chr(len(mqtt_pw)) + mqtt_pw
	end if
	buf=chr(CONNECT)+mqtt_build_remaining_length(len(buf)) + buf
	buf=chr(CONNECT)+chr(14+len(mqtt_user)+len(mqtt_pw)+1)+chr(&h0)+chr(&h6)+MQTT_PROTOCOL+chr(&h3)+chr(&h2)+chr(0)+chr(&h3c)+chr(0)+chr(&h11)+mqtt_user+chr(&h2f)+mqtt_pw
	sock_setdata(buf)
	sock.send	
end sub

function mqtt_connect(byref dst_ip as string,dst_port as word,byref user as string,byref password as string,keep_alive as byte) as ok_ng
'API function, instructs the library to connect to the MQTT server (broker).<br><br>
'<b>dst_ip</b>- the IP address of the MQTT server,<br>
'<b>dst_port</b>- target port on the MATT server,<br>
'<b>user</b> and <b>password</b>- MQTT server login credentials,<br>
'<b>keep_alive</b>- the interval, in seconds, at which the server will ping this device.<br><br>
'Returns OK if executed successfully.
		mqtt_connect = NG
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit function
	end if

	mqtt_server_port=dst_port
	mqtt_server_ip=dst_ip
	mqtt_user=user
	mqtt_pw=password

	mqtt_keep_alive_timer=keep_alive*2  ' half second * 2
	dim connection_status as pl_sock_state=mqtt_call_connect()
	if (connection_status = PL_TLS_EST) then
		mqtt_send_login()		
		mqtt_connect = OK
	end if
	
end function

function mqtt_reconnect() as ok_ng
'API function, instructs the library to reconnect to the MQTT server (broker) using connection parameters previously supplied with mqtt_connect().<br>
'Returns OK if executed successfully.
	
	mqtt_reconnect = NG
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit function
	end if

	sock.num=mqtt_sock_num
		
	if (sock.statesimple = PL_SSTS_CLOSED) then
		sock.close
		mqtt_call_connect()
	end if
	
	if (sock.statesimple = PL_SSTS_EST) then
		mqtt_send_login()
		mqtt_reconnect = OK
	end if
	
end function

sub mqtt_disconnect()
'API procedure, disconnects the device from the MQTT server (broker).	
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit sub
	end if
	if mqtt_cur_state<>ms_connected then exit sub
	dim current_sock as byte = sock.num

	dim buf as string = chr(DISCONNECT)+chr(0)
	
	sock.num = mqtt_sock_num
	sock_setdata(buf)
	sock.send
	
	sock.num = current_sock
end sub

sub mqtt_publish(byref topic as string, byref data as string, qos as en_qos_choices)
'API procedure, publishes a <b>topic</b> and its <b>data</b> to the MQTT server (broker).
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit sub
	end if
	if mqtt_cur_state<>ms_connected then exit sub

	dim buf as string
	dim remaining_length as byte
	dim current_sock as byte = sock.num

	#if MQTT_DEBUG_PRINT=1
		mqtt_debug_print("Publishing: topic="+topic+", data="+data)
	#endif

	if (qos = QOS_AT_MOST_ONCE) then
		buf=chr(0)+chr(len(topic))+topic+data
	else
		buf=chr(0)+chr(len(topic))+topic+mqtt_get_packet_identifier()+data
	end if
	
	buf=chr(PUBLISH+1+(qos*2))+mqtt_build_remaining_length(len(buf)) + buf

	sock.num=mqtt_sock_num
	sock_setdata(buf)
	sock.send
	
	sock.num = current_sock
end sub

sub mqtt_sub(byref topic as string,qos as en_qos_choices)
'API procedure, subscribes the device to the specified topic on the MQTT server (broker).<br><br>
'<b>topic</b>- the topic to subscribe to,<br>
'<b>qos</b>- requested quality of service, according to the en_qos_choices enum.
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit sub
	end if
	if mqtt_cur_state<>ms_connected then exit sub

	dim buf as string
	dim current_sock as byte = sock.num
	
	#if MQTT_DEBUG_PRINT=1
		mqtt_debug_print("Subscribing to: data="+topic)
	#endif
	
	buf=mqtt_get_packet_identifier()+chr(0)+chr(len(topic))+topic+chr(qos)
	buf=chr(SUBSCRIBE+2)+mqtt_build_remaining_length(len(buf)) + buf

	sock.num=mqtt_sock_num
	sock_setdata(buf)
	sock.send
	
	sock.num = current_sock
end sub

sub mqtt_unsub(byref topic as string)
'API procedure, unsubscribes the device from the specified topic.<br><br>
'<b>topic</b>- message to unsubscribe from.
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
		#endif
		exit sub
	end if
	if mqtt_cur_state<>ms_connected then exit sub

	dim buf as string
	dim current_sock as byte = sock.num
	
	#if MQTT_DEBUG_PRINT=1
		mqtt_debug_print("Unsubscribing from: data="+topic)
	#endif
	
	buf=mqtt_get_packet_identifier()+chr(0)+chr(len(topic))+topic
	buf=chr(UNSUBSCRIBE+2)+mqtt_build_remaining_length(len(buf)) + buf
	
	sock.num=mqtt_sock_num
	sock_setdata(buf)
	sock.send
	
	sock.num = current_sock
	
end sub

sub mqtt_proc_timer()
'Event procedure, call it from the on_sys_timer() event handler.
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then exit sub
	sock.num=mqtt_sock_num
	if mqtt_cur_state=ms_connected then
		mqtt_timer_record=mqtt_timer_record+1
		if mqtt_timer_record>=mqtt_keep_alive_timer then
			sock.num=mqtt_sock_num
			if sock.rxlen=0 then
				#if MQTT_DEBUG_PRINT=1
					mqtt_debug_print("Ping.")
				#endif

				sock_setdata(chr(PINGREQ)+chr(0))
				sock.send
				mqtt_timer_record=0
			end if
		end if
	end if
	if sock.statesimple<>PL_SSTS_EST then
		mqtt_cur_state=ms_idle
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("Lost server connection.")
		#endif
		callback_mqtt_connect_lost()
	end if
end sub

sub mqtt_proc_data()
'Event procedure, call it from the on_sock_data_arrival event handler.
	
	if mqtt_init_flag<>MQTT_INIT_SIGNATURE then exit sub
	if sock.num<>mqtt_sock_num then exit sub

	dim buf as string = sock_peekdata(3)
		
	if (len(buf) < 2) then
		exit sub
	end if
	
	dim tmr as dword
	dim index as byte=2
	dim multiplier as dword=1
	dim length as long=0
	dim encodedByte as byte
	do
		encodedByte=asc(mid(buf,index,1))
		length=length+(encodedByte and 127) * multiplier
		multiplier=multiplier * 128
		index=index+1
	loop while (encodedByte and 128) <> 0

	dim fixed_header_length as byte = 2	
	if (length > 127) then fixed_header_length = fixed_header_length + 1
	dim head as byte = asc(left(buf,1))
	dim qos as en_qos_choices = (head and &h06) shr 1
	head = (head and &hF0)
	
	
	tmr=sys.timercountms
	while sock.txfree<200 and sys.timercountms-tmr<MQTT_TIMEOUT
	wend

	buf = sock_peekdata(length+fixed_header_length)		

	select case (head)
		
		case CONNACK:	#if MQTT_DEBUG_PRINT=1		
							mqtt_debug_print("Connected to server.")
						#endif
						sock_getdata(length+fixed_header_length)
						mqtt_timer_record=0
 						mqtt_cur_state=ms_connected
						callback_mqtt_connect_ok()
		
		case PUBLISH:	buf = right(buf,len(buf)-fixed_header_length)
						dim topic_length as byte =asc(mid(buf,1,1))*256 +asc(mid(buf,2,1))
						#if MQTT_DEBUG_PRINT=1
						'	mqtt_debug_print("Notification: topic="+mid(buf,3,length)+", data="+right(buf,len(buf)-length-2-((qos<>QOS_AT_MOST_ONCE)*2)))
						#endif
						dim ack as string = mid(buf,topic_length+3,2)
						dim topic as string = mid(buf,3,topic_length)
						dim st as string  = sock_getdata(topic_length+fixed_header_length+4)
						length=length-topic_length-4	
						tmr=sys.timercountms
						while length>0 and sys.timercountms-tmr<MQTT_TIMEOUT
							dim length_word as word = length
							dim data as string = sock_getdata(length_word)
							length=length-len(data)
							if len(data)<>0 then
								#if MQTT_LARGE_PACKETS
									callback_mqtt_notif(topic,data,length)
								#else
									callback_mqtt_notif(topic,data)
								#endif
								tmr=sys.timercountms
							end if
							tmr=sys.timercountms
						wend
						if (qos = QOS_AT_LEAST_ONCE) then
							buf = chr(PUBACK) + chr(2) + ack
							sock_setdata(buf)
							sock.send
						else if (qos = QOS_EXACTLY_ONCE) then
							buf = chr(PUBREC) + chr(2) + ack
							sock_setdata(buf) 
							sock.send
						end if
		
		case PUBACK:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Publish ack.")
						#endif
		case PUBREC:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Publish rec.")
						#endif
						buf = right(buf,length)
						buf=chr(PUBREL+fixed_header_length) + chr(2) + buf
						sock_setdata(buf)
						sock.send
		
		case PUBREL:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Publish rel.")
						#endif
						buf = right(buf,length)
						buf=chr(PUBCOMP) + chr(2) + buf
						sock_setdata(buf)
						sock.send						
		
		case PUBCOMP:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Publish comp.")
						#endif
		case SUBACK:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Subscribe ack.")
						#endif
						callback_mqtt_sub_ok()
		case UNSUBACK:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Unsubscribe ack.")
						#endif
		case PINGRESP:	sock_getdata(length+fixed_header_length)
						#if MQTT_DEBUG_PRINT=1
							mqtt_debug_print("Ping response.")
						#endif
	end select

end sub

#if MQTT_DEBUG_PRINT=1
sub mqtt_debug_print(data as string)
	sys.debugprint(MQTT_STAMP+data+MQTT_CR_LF)
end sub
#endif

function sock_peekdata (byref maxinplen as word) as string
#if MQTT_SSL 
	sock_peekdata =sock.tlspeekdata(maxinplen)
	if 0 then
		sock_peekdata = sock.tlsgetdata(maxinplen)
		sys.debugprint(sock_peekdata)
	end if
#else
	sock_peekdata =sock.peekdata(maxinplen)
#endif
end function

sub sock_setdata(byref txdata as string)
#if MQTT_SSL 
	sock.tlssetdata(txdata)
#else
	sock.setdata(txdata)
#endif
end sub

function sock_getdata(byref maxinplen as word) as string
#if MQTT_SSL 
	sock_getdata=sock.tlsgetdata(maxinplen)
#else
	sock_getdata=sock.getdata(maxinplen)
#endif
end function

#if MQTT_LARGE_PACKETS 
	
	sub mqtt_start_publish(byref topic as string, qos as en_qos_choices, length as dword)
	'API procedure, starts the procedure of publishing to the MQTT server (broker). Must be called before calling mqtt_continue_publish().
	'<b>topic</b> - Name of the topic to be published
	'<b>qos</b> - QoS level
	'<b>length</b> - Total length of the payload to be sent


		if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
			#if MQTT_DEBUG_PRINT=1
				mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
			#endif
			exit sub
		end if
		if mqtt_cur_state<>ms_connected then exit sub
			
		if mqtt_packet_length<>0 then
			#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("ERROR: Previous MQTT packet not fully sent. " + str(mqtt_packet_length) + " bytes remaining.")
			#endif
			mqtt_packet_length=0
			connect_lost=YES
			exit sub
		end if
		mqtt_packet_length=length
		dim buf as string
		dim remaining_length as byte
		dim current_sock as byte = sock.num
		dim tmr as dword
		#if MQTT_DEBUG_PRINT=1
			mqtt_debug_print("Publishing: topic="+topic)
		#endif

		if (qos = QOS_AT_MOST_ONCE) then
			buf=chr(0)+chr(len(topic))+topic
		else
			buf=chr(0)+chr(len(topic))+topic+mqtt_get_packet_identifier()
		end if
		
		buf=chr(PUBLISH+1+(qos*2))+mqtt_build_remaining_length(len(buf) + length) + buf

		sock.num=mqtt_sock_num
		
		dim buf_len as byte=len(buf)
		tmr=sys.timercountms
		while buf_len>0 and sys.timercountms-tmr<MQTT_TIMEOUT
			dim tx_free as word = sock.txfree/2
			if buf_len<=tx_free then
				sock_setdata(buf)
				buf_len=0
			else
				sock_setdata(left(buf,tx_free))
				buf=right(buf,len(buf)-tx_free)
				buf_len=buf_len-tx_free
			end if		
			sock.send	
			tmr=sys.timercountms
		wend
		
		sock.num = current_sock

	end sub

	sub mqtt_continue_publish(byref data as string)
	'API procedure, continues publishing to the MQTT server (broker). Must be called until the number of bytes set in mqtt_start_publish() has been reached.
	'<b>data</b> - Data to be sent. Cannot exceed 255 bytes. To send a payload greater than 255 bytes, the subroutine must be called again.

		dim tmr as dword

		if mqtt_init_flag<>MQTT_INIT_SIGNATURE then
			#if MQTT_DEBUG_PRINT=1
				mqtt_debug_print("ERROR: mqtt_start() wasn't called.")
			#endif
			exit sub
		end if
		if mqtt_cur_state<>ms_connected then exit sub

		mqtt_packet_length=mqtt_packet_length-len(data)
		if mqtt_packet_length < 0 then
			#if MQTT_DEBUG_PRINT=1
				mqtt_debug_print("ERROR: Number of bytes being sent exceeds number set in header")
			#endif
			mqtt_packet_length=0
			connect_lost=YES
			exit sub
		end if
		
		dim current_sock as byte = sock.num
		sock.num=mqtt_sock_num
		
		dim length as byte=len(data)
		tmr=sys.timercountms
		while length>0 and sys.timercountms-tmr<MQTT_TIMEOUT
			dim tx_free as word = sock.txfree/2
			 
			if length<=tx_free then
				sock_setdata(data)
				length=0
			else
				sock_setdata(left(data,tx_free))
				data=right(data,len(data)-tx_free)
				length=length-tx_free
			end if		
			sock.send		
			tmr=sys.timercountms
		wend
		
		sock.num = current_sock

	end sub


#endif