'DEFINES-------------------------------------------------------------

#define MQTT_DEBUG_PRINT 1
#define MQTT_APP_CLIENT_ID "SUBSCRIBER"
#define MQTT_LARGE_PACKETS 1
#define MQTT_SSL 1

const MQTT_NAME="SUBSCRIBER"				'<<<<<<<<====== MQTT server login name
const MQTT_PASSWORD ="TESTTEST"				'<<<<<<<<====== MQTT server login password
const OWN_IP="192.168.1.244"				'<<<<<<<<====== This is the IP address of this device
const SUBSCRIBE_DEMO_GATEWAY="192.168.1.1"	'<<<<<<<<====== Gateway IP address
const MQTT_SERVER_HOST="192.168.1.170"		'<<<<<<<<====== MQTT server IP

#if MQTT_SSL 
const MQTT_PORT=1882						'<<<<<<<<====== MQTT server IP
#else
const MQTT_PORT=1883						'<<<<<<<<====== MQTT server IP
#endif

const PAT_GREEN_BLINKING=	"G-~"			'opening TCP link to MQTT server
const PAT_GREEN_ON=			"G~"			'server connection established

'INCLUDES------------------------------------------------------------

include "sock\trunk\sock.tbh"
include "mqtt\trunk\mqtt.tbh"
'DECLARATIONS--------------------------------------------------------

declare connect_lost as no_yes

'TLS--------------------------------------------------------

CONST PL_TLS_EST = &h82
'--------------------------------------------------------------------
enum pl_tls_state
'<b>ENUM. </b><br><br> Contains a list of constants related to possible TLS errors.
    PL_TLS_SUCCESS,   
    PL_TLS_ERROR_RND,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to make random seed.  
    PL_TLS_ERROR_CFG,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.      
    PL_TLS_ERROR_CTX,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.      
    PL_TLS_ERROR_SOCKNUM,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.  
    PL_TLS_ERROR_NOBUFF 	
end enum

syscall(834) sock.tlsinit() as pl_tls_state

syscall(835) sock.tlshandshake()

syscall(836) sock.tlsdeinit()

'--------------------------------------------------------------------
syscall(837) sock.tlssetdata(byref txdata as string) as word
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) adds the data passed in the txdata argument to
'the contents of the TX buffer. If the buffer doesn't have enough space to accommodate the data being added then this data will be truncated. 
'Newly saved data is not sent out immediately. This only happens after the data has been encrypted. 
'Returns the number of bytes sent. 


'--------------------------------------------------------------------
syscall(838) sock.tlsgetdata(maxinplen as word) as string
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) returns the string that contains the unencrypted data
'extracted from the RX buffer. Extracted data is permanently deleted from the buffer. <br><br>
'Length of extracted data is limited by one of the three factors (whichever is smaller): amount of data in the RX buffer itself, capacity of 
'the "receiving" string variable, and the limit set by the maxinplen argument.<br><br>


'--------------------------------------------------------------------
syscall(840) sock.tlspeekdata(maxinplen as word) as string
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) returns the string that contains the unencrypted data
'extracted from the RX buffer. Extracted data is permanently deleted from the buffer. <br><br>
'Length of extracted data is limited by one of the three factors (whichever is smaller): amount of data in the RX buffer itself, capacity of 
'the "receiving" string variable, and the limit set by the maxinplen argument.<br><br>

#define BUFF_PAGE_TYPE word

'--------------------------------------------------------------------
syscall(839,"35.TDL") sock.tlsbuffrq(numpages as BUFF_PAGE_TYPE) as BUFF_PAGE_TYPE